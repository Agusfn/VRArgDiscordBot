import { DiscordCommand } from "@ts/interfaces";
import { SlashCommandBuilder } from "discord.js";
import { BeatSaberScript } from "../BeatSaberScript";
import { PlayerScore, SSPlayer } from "../models";
import { replyLongMessageToInteraction, roundNumber } from "@utils/index";
import { formatAcc } from "../utils/other";

const AMOUNT_OF_SCORES = 100

export default {
	data: new SlashCommandBuilder()
		.setName('menor_acc')
		.setDescription("Ver tu top "+AMOUNT_OF_SCORES+" scores de maps ranked con menos accuracy."),
	async execute(script, interaction) {
		
		await interaction.deferReply();

		// get scoresaber player id
		const ssPlayer = await SSPlayer.scope({ method: ["withDiscordUserId", interaction.user.id] }).findOne()

		if(!ssPlayer) {
			interaction.reply(`Tu cuenta de scoresaber no está vinculada con tu cuenta de discord. Vinculala con /linkear <id scoresaber>.`)
			return
		}

		const scores = await PlayerScore.scope({ method: ["leastAccuracy", ssPlayer.id, AMOUNT_OF_SCORES] }).findAll()

		let message = "**__Aca tenes tu top 10 scores con menos accuracy:__**\n\n"

		let count = 0

		for(const score of scores) {
			if(!score.Leaderboard) continue
			console.log("scores", score.Leaderboard.dataValues.songHash)

			message += "**" + formatAcc(score.accuracy) + "** ("+roundNumber(score.pp, 1)+"pp) en " + score.Leaderboard.readableMapDesc() + "\n"

			count++
			if (count >= 10) break
		}

		message += "\n\n*Aca te generé un archivo .bplist con tus top "+AMOUNT_OF_SCORES+" scores con menos accuracy. Descargalo y abrilo con Beat Saber para verlos en el juego.*"

		// Generate bplist text
		const bplist = await generateBplist(scores)

		// Send 


		// Send bplist file

		await interaction.followUp({content: message, files: [{attachment: Buffer.from(bplist, 'utf-8'), name: `menor_acc.bplist`}]})


	},
} as DiscordCommand<BeatSaberScript>;


async function generateBplist(scores: any[]) {

	const bplistImage =
  "";




	const formatedList = {
		AllowDuplicates: true,
		playlistTitle: `Lower scores`,
		playlistAuthor: "SantosBot",
		image: `base64,${bplistImage}`,
		songs: scores.map((score) => {
			return {
				hash: score.Leaderboard.dataValues.songHash,
				difficulties: [
					{
						characteristic: "Standard",
						name: score.Leaderboard.dataValues.difficultyName.split("_")[1],
					},
				],
			};
		}),
	};

	return JSON.stringify(formatedList);
}
